# Generated by Django 3.2.9 on 2023-07-19 19:13

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DefinirProblema',
            fields=[
                ('id_definirProb', models.AutoField(primary_key=True, serialize=False)),
                ('preguntas_secundarias', models.IntegerField(default=1, help_text='Número de preguntas secundarias')),
                ('fuentes', models.IntegerField(default=1, help_text='Número de fuentes a seleccionar')),
                ('paso', models.IntegerField(default=1, help_text='Paso en que se encuentra el progreso del equipo para este Problema')),
                ('entregable', models.CharField(choices=[('0', 'Infografía'), ('1', 'Mapa conceptual'), ('2', 'Mapa mental'), ('3', 'Presentación'), ('4', 'Video')], default='0', help_text="Tipo de Entregable'", max_length=1)),
                ('retro1', models.TextField(help_text='Información de primera retrospectiva', null=True)),
                ('retro2', models.TextField(help_text='Información de segunda retrospectiva', null=True)),
                ('retro3', models.TextField(help_text='Información de tercera retrospectiva', null=True)),
                ('retro4', models.TextField(help_text='Información de cuarta retrospectiva', null=True)),
                ('retro5', models.TextField(help_text='Información de quinta retrospectiva', null=True)),
                ('retro6', models.TextField(help_text='Información de sexta retrospectiva', null=True)),
            ],
            options={
                'verbose_name': 'Progreso de equipo',
                'verbose_name_plural': 'Progreso de equipos',
            },
        ),
        migrations.CreateModel(
            name='Fuente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=60, verbose_name='Título')),
                ('autor', models.CharField(max_length=60, null=True, verbose_name='Autor')),
                ('fecha_publicacion', models.DateField(null=True)),
                ('lugar', models.CharField(max_length=60, null=True, verbose_name='Lugar de Publicación')),
                ('tipo_fuente', models.CharField(choices=[('0', 'LIBRO'), ('1', 'REVISTA'), ('2', 'PERIODICO'), ('3', 'SITIO WEB'), ('4', 'VIDEO'), ('5', 'IMAGEN')], max_length=1, verbose_name='Tipo de Fuente')),
                ('tipo_recurso', models.CharField(choices=[('1', 'ENLACE')], max_length=1, verbose_name='Tipo de Recurso')),
                ('enlace', models.CharField(max_length=120, verbose_name='Enlace')),
                ('votos', models.IntegerField(default=0)),
                ('ganadora', models.BooleanField(default=False)),
                ('id_defproblema', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='AMCE.definirproblema')),
            ],
        ),
        migrations.CreateModel(
            name='Grupo',
            fields=[
                ('id_grupo', models.CharField(help_text='Código para inscripción a este grupo', max_length=10, primary_key=True, serialize=False, unique=True)),
                ('nombre_grupo', models.CharField(help_text='Nombre del grupo', max_length=100)),
                ('materia', models.CharField(blank=True, help_text='Nombre de la materia a la que pertenece este grupo', max_length=100, null=True)),
                ('institucion', models.CharField(blank=True, help_text='Nombre de la institución a la que pertenece este grupo', max_length=100, null=True)),
            ],
            options={
                'verbose_name': 'Grupo',
                'verbose_name_plural': 'Grupos',
            },
        ),
        migrations.CreateModel(
            name='ParticipacionEst',
            fields=[
                ('id_actividad', models.AutoField(primary_key=True, serialize=False)),
                ('fecha', models.DateTimeField(default=django.utils.timezone.now, help_text='Fecha en que se realizó la participación')),
                ('contenido', models.TextField(help_text='Contenido de la participación', null=True)),
            ],
            options={
                'verbose_name': 'Participación',
                'verbose_name_plural': 'Participaciones',
            },
        ),
        migrations.CreateModel(
            name='Tema',
            fields=[
                ('id_tema', models.AutoField(help_text='Indetificador único del Tema', primary_key=True, serialize=False)),
                ('nombre_tema', models.CharField(help_text='Título del Tema', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('es_estudiante', models.BooleanField(default=False)),
                ('es_profesor', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Estudiante',
            fields=[
                ('user_estudiante', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='AMCE.user')),
            ],
        ),
        migrations.CreateModel(
            name='Pregunta',
            fields=[
                ('id_pregunta', models.OneToOneField(help_text='Referencia a pregunta', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='AMCE.participacionest')),
                ('tipo_pregunta', models.PositiveSmallIntegerField(choices=[(1, 'inicial'), (2, 'secundaria'), (10, 'otro')], default=10, help_text='Tipo de pregunta')),
                ('votos', models.IntegerField(default=0, help_text='Número de votos')),
                ('ganadora', models.BooleanField(default=False, help_text='¿La pregunta es ganadora?')),
            ],
            options={
                'verbose_name': 'Pregunta',
                'verbose_name_plural': 'Preguntas',
            },
        ),
        migrations.CreateModel(
            name='Profesor',
            fields=[
                ('user_profesor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='AMCE.user')),
            ],
            options={
                'verbose_name': 'Profesor',
                'verbose_name_plural': 'Profesores',
            },
        ),
        migrations.CreateModel(
            name='Equipo',
            fields=[
                ('id_equipo', models.AutoField(primary_key=True, serialize=False)),
                ('nombre_equipo', models.CharField(help_text='Nombre del Equipo', max_length=100)),
                ('grupo_equipo', models.ForeignKey(help_text='Grupo al que pertenece el equipo', on_delete=django.db.models.deletion.CASCADE, to='AMCE.grupo')),
                ('temas_asignados', models.ManyToManyField(blank=True, help_text='Tema asignado al Equipo', to='AMCE.Tema')),
            ],
            options={
                'verbose_name': 'Equipo',
                'verbose_name_plural': 'Equipo',
            },
        ),
        migrations.AddField(
            model_name='definirproblema',
            name='equipo_definirProb',
            field=models.ForeignKey(help_text='Equipo al que pertenece el Problema', on_delete=django.db.models.deletion.CASCADE, to='AMCE.equipo'),
        ),
        migrations.AddField(
            model_name='definirproblema',
            name='tema_definirProb',
            field=models.ForeignKey(help_text='Tema del Problema', on_delete=django.db.models.deletion.CASCADE, to='AMCE.tema'),
        ),
        migrations.AddField(
            model_name='definirproblema',
            name='trabajo_final',
            field=models.ForeignKey(help_text='Trabajo final del equipo', null=True, on_delete=django.db.models.deletion.CASCADE, to='AMCE.participacionest'),
        ),
        migrations.AddField(
            model_name='tema',
            name='profesor_tema',
            field=models.ForeignKey(help_text='Profesor propietario del Tema', on_delete=django.db.models.deletion.CASCADE, to='AMCE.profesor'),
        ),
        migrations.CreateModel(
            name='Respuesta',
            fields=[
                ('id_respuesta', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='AMCE.participacionest')),
                ('tipo', models.PositiveSmallIntegerField(choices=[(1, 'fuente'), (2, 'sintetizada'), (3, 'inicial'), (10, 'otro')], default=10)),
                ('votos', models.IntegerField(default=0)),
                ('ganadora', models.BooleanField(default=False)),
                ('referencia', models.TextField(null=True)),
                ('definirProb', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='AMCE.definirproblema')),
                ('fuente', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='AMCE.fuente')),
                ('pregunta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='AMCE.pregunta')),
            ],
        ),
        migrations.AddField(
            model_name='pregunta',
            name='definirProb_pregunta',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='AMCE.definirproblema'),
        ),
        migrations.AddField(
            model_name='pregunta',
            name='votadores',
            field=models.ManyToManyField(blank=True, to='AMCE.Estudiante'),
        ),
        migrations.AddField(
            model_name='participacionest',
            name='estudiante_part',
            field=models.ForeignKey(help_text='Estudiante que realizó la participación', on_delete=django.db.models.deletion.CASCADE, related_name='post', to='AMCE.estudiante'),
        ),
        migrations.AddField(
            model_name='grupo',
            name='profesor_grupo',
            field=models.ForeignKey(help_text='Profesor encargado este grupo', on_delete=django.db.models.deletion.CASCADE, to='AMCE.profesor'),
        ),
        migrations.CreateModel(
            name='FuentesSeleccionadas',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_defproblema', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='definirproblema', to='AMCE.definirproblema')),
                ('id_fuente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fuente', to='AMCE.fuente')),
                ('id_estudiante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='estudiante', to='AMCE.estudiante')),
            ],
        ),
        migrations.CreateModel(
            name='EvaPreguntaSecundarias',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.PositiveSmallIntegerField(choices=[(1, 'paso1'), (3, 'paso3'), (4, 'paso4'), (10, 'otro')], default=10)),
                ('estudiante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('id_definirProb_pregunta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='AMCE.definirproblema')),
                ('pregunta', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='AMCE.pregunta')),
            ],
        ),
        migrations.CreateModel(
            name='EvaluacionFuentesSel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comentario', models.TextField(null=True)),
                ('id_defproblema', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='definirproblemaEvFuente', to='AMCE.definirproblema')),
                ('id_fuente', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='AMCE.fuente')),
                ('id_estudiante', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='estudianteEvFuente', to='AMCE.estudiante')),
            ],
        ),
        migrations.AddField(
            model_name='estudiante',
            name='grupos_inscritos',
            field=models.ManyToManyField(blank=True, to='AMCE.Grupo'),
        ),
        migrations.AddField(
            model_name='equipo',
            name='estudiantes',
            field=models.ManyToManyField(blank=True, help_text='Integrantes del Equipo', to='AMCE.Estudiante'),
        ),
        migrations.CreateModel(
            name='ComentariosPreguntaInicial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('participacionEst', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='AMCE.participacionest')),
                ('pregunta', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='AMCE.pregunta')),
            ],
            options={
                'verbose_name': 'Comentario de pregunta Inicial',
                'verbose_name_plural': 'Comentarios Iniciales',
            },
        ),
    ]
